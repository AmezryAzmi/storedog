name: Publish release

# Only release on a new tag that is a version number.
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:

  publish_service_containers:
    name: Publish all images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ECR
        id: login-ecr
        uses: docker/login-action@v1
        with:
           registry: public.ecr.aws
           username: ${{ secrets.AWS_ACCESS_KEY_ID }}
           password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Download, Tag, and Push Service Images
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}

          IMAGES=(
            ${{ secrets.PUBLIC_ECR_REGISTRY }}/storedog/backend
            ${{ secrets.PUBLIC_ECR_REGISTRY }}/storedog/discounts
            ${{ secrets.PUBLIC_ECR_REGISTRY }}/storedog/ads
            ${{ secrets.PUBLIC_ECR_REGISTRY }}/storedog/ads-java
            ${{ secrets.PUBLIC_ECR_REGISTRY }}/storedog/attackbox
            ${{ secrets.PUBLIC_ECR_REGISTRY }}/storedog/auth
            ${{ secrets.PUBLIC_ECR_REGISTRY }}/storedog/nginx
            ${{ secrets.PUBLIC_ECR_REGISTRY }}/storedog/frontend
            ${{ secrets.PUBLIC_ECR_REGISTRY }}/storedog/dbm
          )

          for i in "${IMAGES[@]}"
          do
            echo "$i"

            # Since frontend is images are build to be platform specific, we need to tag and deploy accordingly
            if [[ "$i" == *"storedog/frontend"* ]]; then

              # build amd image
              docker pull "$i":amd-latest
              docker tag "$i":amd-latest "$i":amd-$TAG
              docker push "$i":amd-$TAG

              # build arm image
              docker pull "$i":arm-latest
              docker tag "$i":arm-latest "$i":arm-$TAG
              docker push "$i":arm-$TAG

              continue
            fi

            docker pull "$i":latest
            docker tag "$i":latest "$i":$TAG
            docker push "$i":$TAG

          done

          echo "All done"

